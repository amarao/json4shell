#!/usr/bin/env python

# TODO - define suitable exceptions, exit codes and some other details
import sys
import collections
import argparse
from lib import jsonops

try:
    command = sys.argv[1]
except IndexError:
    print "No command given"
    sys.exit(1)
    #  We'd need usage explanation here as no arguments were supplied

line = sys.stdin.read()
try:
    json = jsonops.load_json(line)
except ValueError as e:
    print "Cannot parse json: " + str(e)
    sys.exit(1)

args = sys.argv[2:]

commands = {
    "array-head": jsonops.array_head,
    "array-tail": jsonops.array_tail,
    "array-slice": jsonops.array_slice,
    "array-get": jsonops.array_get,
    # "array-filter": jsonops.array_filter,
    # "array-map": jsonops.array_map,
    # "array-to-object": jsonops.array_to_object,
    # "array-join": jsonops.array_join,
    # "array-fold": jsonops.array_fold,
    # "array-lfold": jsonops.array_lfold,
    # "array-rfold": jsonops.array_rfold,
    "array-sort": jsonops.array_sort,
    "array-uniq": jsonops.array_uniq,
    "array-shuffle": jsonops.array_shuffle,
    "array-enumerate": jsonops.array_enumerate,
    "object-get": jsonops.object_get,
    "object-keys": jsonops.object_keys,
    "object-values": jsonops.object_values,
    "print": jsonops.pprint
}

try:  # Checking command's existence in the list
    function = commands[command]
except KeyError:
    print "No such command"
    sys.exit(1)
    # We'd need usage explanation here as command
    # is not supported

try:
    # Functions may throw exception in case of wrong
    # arguments or something like that
    result = function(json, *args)
except Exception as e:
    # More sophisticated exception processing to be added
    print "Error: " + str(e)
    sys.exit(1)
else:
    print unicode(result).encode('utf8')
