#!/usr/bin/env python
'''
    Will run specified command over each element of JSON array
    and passing it (or it elements) as command line.

    If array consists of:
    1) simple objects (string/number), than it will iterated over
       'as is', passing one element of array in a time.

    2) arrays, than all values of nested array will be placed as
       arguments

    3) objects, than we allow to specify key or/and values

    All variants allow to space arguments to specified place.

    Whole idea is to create 'xargs' with json-driven input,
    and command line options/behavior should be similar.

    Unsolved cases: what if array consists of different elements?

    Implementation plan:
    1) Create a 'type detector'
    2) Implements case1 (as is) (output to stdout)
    3) Add -I option
    4) Add -n option
    5) (fog of war)

'''

import sys
import argparse
from lib import jsonops
from lib import jsoniter


parser = argparse.ArgumentParser(
    description='Iterate command over JSON from stdin'
    )

parser.add_argument(
    '-j', '--json',
    help='Output execution results in json',
    action='store_true'
)
parser.add_argument(
    '-V', '--verbose',
    help="print executed commands and resuls of json mode to stderr",
    action='store_true'
)
parser.add_argument(
    'command',
    nargs=argparse.REMAINDER,
    help='Command to execute on chunk from stdin JSON array'
)
args = parser.parse_args()
line = sys.stdin.read()
try:
    json = jsonops.load_json(line)
except ValueError as e:
    print 'Cannot parse json: ' + str(e)
    sys.exit(1)

for e in json:
    jsoniter.jpath_exec(
        args.command,
        e,
        error_control=False,
        json_out=args.json,
        verbose=args.verbose
    )
