#!/usr/bin/env python
'''
    Will run specified command over each element of JSON array
    and passing it (or it elements) as command line.

    If array consists of:
    1) simple objects (string/number), than it will iterated over
       'as is', passing one element of array in a time.

    2) arrays, than all values of nested array will be placed as
       arguments

    3) objects, than we allow to specify key or/and values

    All variants allow to space arguments to specified place.

    Whole idea is to create 'xargs' with json-driven input,
    and command line options/behavior should be similar.

    Unsolved cases: what if array consists of different elements?

    Implementation plan:
    1) Create a 'type detector'
    2) Implements case1 (as is) (output to stdout)
    3) Add -I option
    4) Add -n option
    5) (fog of war)

'''

import sys
import argparse
from lib import jsonops
from lib import jsoniter


parser = argparse.ArgumentParser(
    description='Iterate command over elements in array from stdin'
    )
parser.add_argument(
    "-n", "--max-args",
    help="Use  at  most  max-args  arguments per command line.",
    type=int,
    default=0
)
recursion = parser.add_mutually_exclusive_group()
recursion.add_argument(
    "-D", "--depth",
    help="Process recursively arrays and subarrays, depth scan",
    action="store_true"
)
recursion.add_argument(
    "-W", "--width",
    help="Process recursively arrays and subarrays, width scan",
    action="store_true"
)
parser.add_argument(
    "command",
    nargs=argparse.REMAINDER,
    help="Command to execute on chunk from stdin JSON array"
)
args = parser.parse_args()
line = sys.stdin.read()
try:
    json = jsonops.load_json(line)
except ValueError as e:
    print "Cannot parse json: " + str(e)
    sys.exit(1)

if type(json) != list:
    print "JSON is not array at toplevel"
    sys.exit(5)

line_types = jsoniter.get_array_inner_types(json)
if (list in line_types or dict in line_types) and len(line_types) > 1:
    print "Multiple types inside array not supported"
    sys.exit(5)

if len(line_types) == 0:
    sys.exit(0)

if line_types <= set((int, str, bool)):
    for el in json:
        jsoniter.simple_exec(sys.argv[1:], list(str(el)))
elif line_types == set((list,)):
    for el in json:
        if not (jsoniter.get_array_inner_types(el) <= set((str, int, bool))):
            print "Recursion is too deep, tripple nested objects not supported"
            sys.exit(5)
        jsoniter.simple_exec(sys.argv[1:], map(str, el))
else:
    print "Unsupported type for iteration:", line_types


#    print unicode(result).encode('utf8')
